package com.speechsuper;

public final class SkEgn {

    static {
        System.loadLibrary("skegn");
    }

    /**
     * 引擎回调接口
     */
    public interface skegn_callback {
        /**
         * Abstract function that requires rewriting the function entity when called
         * @param id Return ID.
         * @param type Return Type.
         * @param data Return data.
         * @param size Data size.
         * @return Return value.
         */
        public abstract int run(byte[] id, int type, byte[] data, int size);
    }

	/** Callback return message type - json  */
	public static int SKEGN_MESSAGE_TYPE_JSON = 1;
	/** Callback return message type - bin  */
    public static int SKEGN_MESSAGE_TYPE_BIN = 2;

    public static int SKEGN_OPT_GET_VERSION = 1;
    public static int SKEGN_OPT_GET_MODULES = 2;
    public static int SKEGN_OPT_GET_TRAFFIC = 3;
    public static int SKEGN_OPT_SET_WIFI_STATUS = 4;
    public static int SKEGN_OPT_GET_PROVISION = 5;
    public static int SKEGN_OPT_GET_SERIAL_NUMBER = 6;
    
    /**
     * Create Engine
     * @param cfg configuration information
     * @param androidContext Context Object
     * @return 0：
     * Engine Object Value: Success
     */
    public static native long skegn_new(String cfg, Object androidContext);

    /**
     * Remove Engine
     * @param engine Engine Object Value
     * @return return value
     */
    public static native int skegn_delete(long engine);
	
    /**
     * Start engine.
     * @param engine Engine Object Value.
     * @param param Parameter Configuration String.
     * @param id The ID character generated by the storage engine.
     * @param callback Skegn_callback object.
     * @param androidContext Context Object.
     * @return Return value.
     */
	public static native int skegn_start(long engine, String param, byte[] id, skegn_callback callback, Object context);
   
    /**
     * Fill the engine buffer with voice data.
     * @param engine Engine Object Value.
     * @param data
     * @param size Data size.
     * @return Return value.
     */
    public static native int skegn_feed(long engine, byte[] data, int size);
	
    /**
     * Stop Engine.
     * @param engine Engine Object Value.
     * @return Return value.
     */
    public static native int skegn_stop(long engine);
	
    /**
     * Cancel the engine, which is used to allow users to cancel the engine in case of abnormal situations.
     * @param engine Engine Object Value.
     * @return Return value
     */
    public static native int skegn_cancel(long engine);
//    public static native int skegn_log(long engine, String log);
    public static native int skegn_opt(long engine, int opt, byte[] data, int size);
	
    /**
     * Get device ID
     * @param device_id Buffer byte [] space for storing IDs.
     * @param androidContext Context Object.
     * @return Return value.
     */
    public static native int skegn_get_device_id(byte[] device_id, Object androidContext);
    
    /**
     * Get errno
     * @return 返回值
     */
    public static native int skegn_get_last_error();

    /**
     * Update provision
     * @param provision_path provision_path Buffer byte space for storing download provision path
     * @param app_key provision_path Buffer byte space of app_key
     * @param secret_key provision_path Buffer byte space of secret_key
     * @param androidContext Context Object.
     * @return Return value.
     */
    public static native int skegn_update_provision(String provision_path,String app_key,String secret_key);
}